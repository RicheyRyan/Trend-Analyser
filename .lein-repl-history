(require [cheshire.core :as cheshire
])
(use cheshire.core :as cheshire)
(require cheshire.core :as cheshire)
(require cheshire.core)
(use cheshire.core)
(use clj-http.client)
(require clj-http.client)
(:require clj-http.client)
(:require trend-analyser.tweets)
(require trend-analyser.tweets)
(source parse-trends)
(require trend-analyser.tweets)
(use trend-analyser.tweets)
(load-file "src/trend_analyser/tweets.clj
")
(load-file "/src/trend_analyser/tweets.clj")
(require 'cheshire.core)
(require 'cheshire.core :as cheshire)
(require '[cheshire.core :as cheshire])
cheshire
(require '[clj-http.client :as http])
(def trend-url
  "https://api.twitter.com/1/trends/560743.json")
(defn parse-trends
  "Loops through a response from Twitter containing trends and returns a list with the trend names."
  [list]
  {:trends
   (into []
         (for [x list]
           (x :name)))})
(defn trends-response
  "Queries Twitter for the trends, pulls out the request body, parses the JSON,
  extracts the trend data and parses it."
  []
  (->
    (http/get trend-url {:accept :json})
    (:body)
    (cheshire/parse-string true)
    peek
    (:trends)
    (parse-trends)))
(trends-response)
(require '[trend-analyser.data :as data])
(defn add-trends-to-db
  "Takes the parsed trend data and inserts it into the database."
  []
  (data/insert-trends (trends-response))
  (add-tweets-to-db)
  (println "inserting"))
(defn add-trends-to-db
  "Takes the parsed trend data and inserts it into the database."
  []
  (data/insert-trends (trends-response))
  (println "inserting"))
(add-trends-to-db)
(require '[monger.core :as mg]
            '[monger.collection :as coll]
            '[monger.json :as json]
            '[monger.result :as result]
            '[monger.util :as mutil])
(import '[com.mongodb MongoOptions ServerAddress]
           '[org.bson.types ObjectId]))
(import '[com.mongodb MongoOptions ServerAddress]
           '[org.bson.types ObjectId]))
(import '[com.mongodb MongoOptions ServerAddress]
           '[org.bson.types ObjectId])
(mg/connect!)
;;Once connected this function instructs MongoDB to use the database "Trend-Analyser".
(mg/use-db! "trend-analyser")
(coll/insert "trends" (into {} (merge {:_id (mutil/object-id) :date (str(java.util.Date.))} (trends-response))))
(trends-response)
(coll/find-maps "trends")
(coll/empty "trends")
(coll/drop "trends")
(coll/find-maps "trends")
(coll/insert "trends" (into {} (merge {:_id (mutil/object-id) :date (str(java.util.Date.))} (trends-response))))
(coll/find-maps "trends")
